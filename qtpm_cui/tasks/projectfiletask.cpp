#include "projectfiletask.h"
#include <iostream>
#include <QDebug>

const QString PriFileName = "qtpackage.pri";

ProjectFileTask::ProjectFileTask(const QDir &current, QObject *parent) :
    QObject(parent), _current(current)
{
    for (const QFileInfo& info : current.entryInfoList(QStringList() << "deps.*", QDir::AllDirs | QDir::NoDotAndDotDot, QDir::Name)) {
        QString name = info.fileName();
        QStringList modules;
        if (!name.startsWith("deps.")) {
            continue;
        }
        QDir moduleDir(info.absoluteFilePath());
        for (QString name : moduleDir.entryList(QStringList() << "*.pri", QDir::Files, QDir::Name)) {
            name.chop(4);
            modules.append(name);
        }
        this->_envs.insert(name.mid(5), modules);
    }
}

bool ProjectFileTask::hasEnv(const QString &envName) const
{
    return this->_envs.contains(envName);
}

bool ProjectFileTask::hasLib(const QString& envName, const QString &libName) const
{
    if (this->_envs.contains(envName)) {
        return this->_envs[envName].contains(libName);
    }
    return false;
}

QString ProjectFileTask::dump() const
{
    QStringList result;
    result << "# This file was generated by qtpm command\n"
           << "# Don't edit this file directly.\n\n";
    for (const QString& env : this->_envs.keys()) {
        result << QString("%1 {").arg(env)
               << QString("    INCLUDEPATH += $$PWD/deps.%1/include").arg(env)
               << QString("    LIBS += -L$$PWD/deps.%1/lib").arg(env);
        for (const QString& module : this->_envs.value(env)) {
            result << QString("    include(deps.%1/%2.pri)").arg(env, module);
        }
        result << "}" << "";
    }
    return result.join("\n");
}

void ProjectFileTask::write() const
{
    QDir currentDir = this->_current;
    if (currentDir.exists(PriFileName)) {
        currentDir.remove(PriFileName);
    }
    QString priFilePath = currentDir.filePath(PriFileName);
    QFile priFile(priFilePath);
    if(!priFile.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        throw new std::logic_error("file creation error");
    }
    QTextStream stream(&priFile);
    stream << this->dump() << endl;
    priFile.close();

    auto proFiles = currentDir.entryList(QStringList() << "*.pro", QDir::Files, QDir::Name);
    if (proFiles.isEmpty()) {
        std::cerr << "There is no *.pro files in this directory" << std::endl;
    }
    for (QString proFileName : proFiles) {
        QFile proFile(currentDir.filePath(proFileName));
        if(!proFile.open(QIODevice::ReadWrite | QIODevice::Text))
        {
            throw new std::logic_error("file creation error");
        }
        QTextStream proStream(&proFile);
        auto lines = proStream.readAll().split("\n");
        if (!lines.contains("include(qtpackage.pri)")) {
            proStream << "\n"
                      << "#This line was added by qtpm command\n"
                      << "include(qtpackage.pri)\n";
        }
        proFile.close();
    }
}
