cmake_minimum_required(VERSION 3.1.0)[[$root := .]]

# project global setting

project([[.TargetSmall]])

set([[.TargetLarge]]_MAJOR_VERSION [[.VersionMajor]])
set([[.TargetLarge]]_MINOR_VERSION [[.VersionMinor]])
set([[.TargetLarge]]_PATCH_VERSION [[.VersionPatch]])
set([[.TargetLarge]]_VERSION [[.Version]])

if(CMAKE_BUILD_TYPE MATCHES Release)
    message("-- Release Build")
    set(WORKDIR "build-release")
    include_directories([[.VendorPath]]/release/include)
    link_directories([[.VendorPath]]/release/lib)
else()
    message("-- Debug Build")
    set(WORKDIR "build-debug")
    include_directories([[.VendorPath]]/release/include)
    link_directories([[.VendorPath]]/release/lib)
endif()

# compiler setting

set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)
set(CMAKE_CXX_STANDARD 11)
if(MSVC)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
else()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
endif()

if(APPLE)
    set(CMAKE_MACOSX_RPATH ON)
    set(CMAKE_SKIP_BUILD_RPATH FALSE)
    set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
    set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
    list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
    if("${isSystemDir}" STREQUAL "-1")
        set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
    endif()
endif()

# enable Qt

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
if(DEFINED ENV{QTDIR})
    set(CMAKE_PREFIX_PATH "$ENV{QTDIR}")
endif()
[[range $index, $qtmodule := .QtModules]]find_package(Qt5[[$qtmodule]] REQUIRED)
[[end]]
# include extra settings

include("CMakeExtra.txt" OPTIONAL)

# build setting

include_directories(src)
[[.Sources.DefineList]][[if gt (len .Requires) 0]]
link_libraries([[range .RequireLibs]] [[.]][[end]])[[end]]
add_library([[.TargetLibName]] SHARED ${[[.Sources.Name]]}[[if .HasResource]] resources/resource.qrc[[end]])
SET_TARGET_PROPERTIES([[.TargetLibName]] PROPERTIES VERSION ${[[.TargetLarge]]_VERSION} SOVERSION ${[[.TargetLarge]]_MAJOR_VERSION})
[[if gt (len .QtModules) 0]]qt5_use_modules([[.TargetLibName]][[range $module := .QtModules]] [[$module]][[end]])[[end]]
# build examples

file(GLOB examples RELATIVE examples *.cpp)
foreach(path IN LISTS examples)
  get_filename_component(target ${path} NAME_WE)
  add_executable(${target} ${path}[[if .HasResource]] resources/resource.qrc[[end]])
  qt5_use_modules(${target}[[range $module := .QtModules]] [[$module]][[end]])
  target_link_libraries(${target} [[.TargetLibName]])
endforeach()
[[if .Tests.HasItem]]
# enable tests

enable_testing()
find_package(Qt5Test REQUIRED)
[[.ExtraTestSources.DefineList]]
[[.Tests.DefineList]]
[[.Tests.StartLoop]]
  add_executable(${file} test/${file}.cpp ${[[.Sources.Name]]} ${[[.ExtraTestSources.Name]]}[[if .HasResource]] resources/resource.qrc[[end]])
  add_test(NAME ${file} COMMAND ${file})
  [[if gt (len .QtModules) 0]]qt5_use_modules(${file} Test[[range $module := .QtModules]] [[$module]][[end]])[[end]]
[[.Tests.EndLoop]]
[[end]]
# install setting

install(TARGETS [[.TargetLibName]] LIBRARY DESTINATION lib)
[[range $installHeaders := .InstallHeaders]]
[[$installHeaders.Files.DefineList]]
install(FILES ${[[$installHeaders.Files.Name]]} DESTINATION include/[[$root.TargetSmall]]/[[$installHeaders.TargetDir]])
[[end]]