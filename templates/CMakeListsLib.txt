cmake_minimum_required(VERSION 3.1.0)[[$root := .]]

# project global setting

project([[.TargetSmall]])

set([[.TargetLarge]]_MAJOR_VERSION [[.VersionMajor]])
set([[.TargetLarge]]_MINOR_VERSION [[.VersionMinor]])
set([[.TargetLarge]]_PATCH_VERSION [[.VersionPatch]])
set([[.TargetLarge]]_VERSION [[.Version]])

if(DEFINED QTPM_IS_ROOT_PROJECT)
    set(READ_SUBDIRECTORIES FALSE)
else()
    set(READ_SUBDIRECTORIES TRUE)
    set(QTPM_IS_ROOT_PROJECT FALSE)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/../../vendor)
    set(VENDOR_PATH ${CMAKE_CURRENT_SOURCE_DIR}/..)
else()
    set(VENDOR_PATH ${CMAKE_CURRENT_SOURCE_DIR}/vendor)
endif()

# compiler setting

set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)
set(CMAKE_CXX_STANDARD 11)
if(MSVC)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
else()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
endif()
if(DEFINED EMSCRIPTEN)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s BINARYEN_METHOD='native-wasm,asmjs' -s BINARYEN=1")
endif()

if(APPLE)
    set(CMAKE_MACOSX_RPATH ON)
    set(CMAKE_SKIP_BUILD_RPATH FALSE)
    set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
    set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
    list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
    if("${isSystemDir}" STREQUAL "-1")
        set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
    endif()
endif()

# enable Qt

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
include_directories(${CMAKE_CURRENT_BINARY_DIR})
set(CMAKE_INCLUDE_CURRENT_DIR ON)
if(DEFINED ENV{QTDIR})
    set(CMAKE_PREFIX_PATH "$ENV{QTDIR}")
endif()
[[range $qtmodule := .QtModules]]find_package(Qt5[[$qtmodule]] REQUIRED)
[[end]]
# extra setting

include("CMakeExtra.txt" OPTIONAL)[[if gt (len .Requires) 0]]

# dependencies

[[range $dependency := .Requires]]if(${READ_SUBDIRECTORIES})
    add_subdirectory(${VENDOR_PATH}/[[$dependency.PackageName]] ${CMAKE_BINARY_DIR}/[[$dependency.LibName]])
endif()
include("${VENDOR_PATH}/[[$dependency.PackageName]]/CMakeExtra.txt" OPTIONAL)
include_directories(${VENDOR_PATH}/[[$dependency.PackageName]]/src)
[[end]][[end]]

# build setting

include_directories(src)
[[.Sources.DefineList]]
add_library([[.TargetLibName]] STATIC ${[[.Sources.Name]]}[[if .HasQtResource]] qtresources/resource.qrc[[end]])
[[if gt (len .QtModules) 0]]qt5_use_modules([[.TargetLibName]][[range $module := .QtModules]] [[$module]][[end]])[[end]][[if gt (len .Requires) 0]]
target_link_libraries([[.TargetLibName]] [[.RequireLibs]])
[[end]][[if .Examples.HasItem]]
# build examples

[[.ExtraExampleSources.DefineList]]
[[.Examples.DefineList]]
[[.Examples.StartLoop]]
  get_filename_component(execname ${file} NAME_WE)
  add_executable(${execname} ${file} ${[[.ExtraExampleSources.Name]]}[[if .HasQtResource]] qtresources/resource.qrc[[end]])
  qt5_use_modules(${execname} Test[[range $module := .QtModules]] [[$module]][[end]])
  target_link_libraries(${execname} [[.TargetLibName]] [[.RequireLibs]])
[[.Examples.EndLoop]]
[[end]][[if .Tests.HasItem]]
# enable tests

enable_testing()
find_package(Qt5Test REQUIRED)
[[.ExtraTestSources.DefineList]]
[[.Tests.DefineList]]
[[.Tests.StartLoop]]
  get_filename_component(execname ${file} NAME_WE)
  add_executable(${execname} ${file} ${[[.ExtraTestSources.Name]]}[[if .HasQtResource]] qtresources/resource.qrc[[end]])
  add_test(NAME ${execname} COMMAND ${execname})
  qt5_use_modules(${execname} Test[[range $module := .QtModules]] [[$module]][[end]])
  target_link_libraries(${execname} [[.TargetLibName]] [[.RequireLibs]])
[[.Tests.EndLoop]]
[[end]]# install setting

install(TARGETS [[.TargetLibName]] ARCHIVE DESTINATION lib)
[[range $installHeaders := .InstallHeaders]]
[[$installHeaders.Files.DefineList]]
install(FILES ${[[$installHeaders.Files.Name]]} DESTINATION include/[[$root.TargetSmall]]/[[$installHeaders.TargetDir]])
[[end]]