cmake_minimum_required(VERSION 3.1.0)

# project global setting

project([[.TargetSmall]])

set([[.TargetLarge]]_MAJOR_VERSION [[.VersionMajor]])
set([[.TargetLarge]]_MINOR_VERSION [[.VersionMinor]])
set([[.TargetLarge]]_PATCH_VERSION [[.VersionPatch]])
set([[.TargetLarge]]_VERSION
 ${[[.TargetLarge]]_MAJOR_VERSION}.${[[.TargetLarge]]_MINOR_VERSION}.${[[.TargetLarge]]_PATCH_VERSION})

# compiler setting

set(CMAKE_CXX_STANDARD 11)

if(APPLE)
    set(CMAKE_MACOSX_RPATH ON)
    set(CMAKE_SKIP_BUILD_RPATH FALSE)
    set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
    set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
    list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
    if("${isSystemDir}" STREQUAL "-1")
        set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
    endif()
endif()

# enable Qt

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
if(DEFINED ENV{QTDIR})
    set(CMAKE_PREFIX_PATH "$ENV{QTDIR}")
endif()
if(DEFINED ENV{QTPM_INCLUDE_PATH})
    include_directories("$ENV{QTPM_INCLUDE_PATH}")
endif()
if(DEFINED ENV{QTPM_LIBRARY_PATH})
    link_directories("$ENV{QTPM_LIBRARY_PATH}")
endif()
[[range $index, $qtmodule := .QtModules]]find_package(Qt5[[$qtmodule]] REQUIRED)
[[end]]

# include extra settings

include("CMakeExtra.txt")

# build setting

include_directories(src)
[[.Sources.DefineList]][[if .Resources.HasItem]][[.Resources.DefineList]]qt5_add_resources(QRC ${[[.Resources.Name]]})
[[end]][[if gt (len .Requires) 0]]
link_libraries([[range .Requires]] [[.]][[end]])[[end]]
add_library([[.TargetSmall]] SHARED ${[[.Sources.Name]]}[[if.Resources.HasItem]] ${QRC}[[end]])
SET_TARGET_PROPERTIES([[.TargetSmall]] PROPERTIES VERSION ${[[.TargetLarge]]_VERSION} SOVERSION ${[[.TargetLarge]]_MAJOR_VERSION})
qt5_use_modules([[.TargetSmall]][[range $module := .QtModules]] [[$module]][[end]])

# build examples

file(GLOB sources RELATIVE examples *.cpp)
foreach(path IN LISTS sources)
  get_filename_component(target ${path} NAME_WE)
  add_executable(${target} ${path}[[if .Resources.HasItem]] ${QRC}[[end]])
  qt5_use_modules(${target}[[range $module := .QtModules]] [[$module]][[end]])
  target_link_libraries(${target} [[.TargetSmall]])
endforeach()
[[if .Tests.HasItem]]
# enable tests

enable_testing()
find_package(Qt5Test REQUIRED)
[[.ExtraTestSources.DefineList]]
[[.Tests.StartLoop]]
  add_executable(${file} test/${file}.cpp ${[[.Sources.Name]]} ${[[.ExtraTestSources.Name]]}[[if .Resources.HasItem]] ${QRC}[[end]])
  add_test(NAME ${file} COMMAND ${file} WORKING_DIRECTORY $build)
  qt5_use_modules(${file} Test[[range $module := .QtModules]] [[$module]][[end]])
[[.Tests.EndLoop]]
[[end]]
# install setting

install(TARGETS [[.TargetSmall]] LIBRARY DESTINATION lib)
[[.InstallHeaders.DefineList]]
[[if .InstallHeaders.HasItem]]install(FILES ${[[.InstallHeaders.Name]]} DESTINATION include/[[.TargetSmall]])[[end]]