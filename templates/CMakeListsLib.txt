cmake_minimum_required(VERSION 3.1.0)[[$root := .]]

# project global setting

project([[.TargetSmall]])

set([[.TargetLarge]]_MAJOR_VERSION [[.VersionMajor]])
set([[.TargetLarge]]_MINOR_VERSION [[.VersionMinor]])
set([[.TargetLarge]]_PATCH_VERSION [[.VersionPatch]])
set([[.TargetLarge]]_VERSION [[.Version]])

if(CMAKE_BUILD_TYPE MATCHES Release)
    message("-- Release Build")
    include_directories([[.DestinationPath]]build-release/include)
    link_directories([[.DestinationPath]]build-release/lib)
else()
    message("-- Debug Build")
    include_directories([[.DestinationPath]]build-debug/include)
    link_directories([[.DestinationPath]]build-debug/lib)
endif()

# compiler setting

set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)
set(CMAKE_CXX_STANDARD 11)
if(MSVC)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
else()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
endif()

if(APPLE)
    set(CMAKE_MACOSX_RPATH ON)
    set(CMAKE_SKIP_BUILD_RPATH FALSE)
    set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
    set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
    list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
    if("${isSystemDir}" STREQUAL "-1")
        set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
    endif()
endif()

# enable Qt

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
if(DEFINED ENV{QTDIR})
    set(CMAKE_PREFIX_PATH "$ENV{QTDIR}")
endif()
[[range $qtmodule := .QtModules]]find_package(Qt5[[$qtmodule]] REQUIRED)
[[end]]
# include extra settings

[[range $dependency := .AllDependencies]]include("[[$dependency]]CMakeExtra.txt" OPTIONAL)
[[end]]
[[if gt (len .Requires) 0]]
# dependencies

link_libraries([[range .RequireLibs]] [[.]][[end]])
[[end]]
# build setting

include_directories(src)
[[.Sources.DefineList]]
add_library([[.TargetLibName]] STATIC ${[[.Sources.Name]]}[[if .HasQtResource]] qtresources/resource.qrc[[end]])
[[if gt (len .QtModules) 0]]qt5_use_modules([[.TargetLibName]][[range $module := .QtModules]] [[$module]][[end]])[[end]][[if .Examples.HasItem]]
# build examples

[[.ExtraExampleSources.DefineList]]
[[.Examples.DefineList]]
[[.Examples.StartLoop]]
  get_filename_component(execname ${file} NAME_WE)
  add_executable(${execname} ${file} ${[[.Sources.Name]]} ${[[.ExtraExampleSources.Name]]}[[if .HasQtResource]] qtresources/resource.qrc[[end]])
  qt5_use_modules(${execname} Test[[range $module := .QtModules]] [[$module]][[end]])
[[.Examples.EndLoop]]
[[end]][[if .Tests.HasItem]]
# enable tests

enable_testing()
find_package(Qt5Test REQUIRED)
[[.ExtraTestSources.DefineList]]
[[.Tests.DefineList]]
[[.Tests.StartLoop]]
  get_filename_component(execname ${file} NAME_WE)
  add_executable(${execname} ${file} ${[[.Sources.Name]]} ${[[.ExtraTestSources.Name]]}[[if .HasQtResource]] qtresources/resource.qrc[[end]])
  add_test(NAME ${execname} COMMAND ${execname})
  qt5_use_modules(${execname} Test[[range $module := .QtModules]] [[$module]][[end]])
[[.Tests.EndLoop]]
[[end]]# install setting

install(TARGETS [[.TargetLibName]] ARCHIVE DESTINATION lib)
[[range $installHeaders := .InstallHeaders]]
[[$installHeaders.Files.DefineList]]
install(FILES ${[[$installHeaders.Files.Name]]} DESTINATION include/[[$root.TargetSmall]]/[[$installHeaders.TargetDir]])
[[end]]