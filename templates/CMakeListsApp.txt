cmake_minimum_required(VERSION 3.1.0)

# project global setting

project([[.TargetSmall]])

set([[.TargetLarge]]_MAJOR_VERSION [[.VersionMajor]])
set([[.TargetLarge]]_MINOR_VERSION [[.VersionMinor]])
set([[.TargetLarge]]_PATCH_VERSION [[.VersionPatch]])
set([[.TargetLarge]]_VERSION [[.Version]])

if(CMAKE_BUILD_TYPE MATCHES Release)
    message("-- Release Build")
    set(WORKDIR "build-release")
    include_directories([[.VendorPath]]/release/include)
    link_directories([[.VendorPath]]/release/lib)
else()
    message("-- Debug Build")
    set(WORKDIR "build-debug")
    include_directories([[.VendorPath]]/release/include)
    link_directories([[.VendorPath]]/release/lib)
endif()

# compiler setting

set(CMAKE_CXX_STANDARD 11)
if(MSVC)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
else()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
endif()

# enable Qt

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
if(DEFINED ENV{QTDIR})
    set(CMAKE_PREFIX_PATH "$ENV{QTDIR}")
endif()

[[range $module := .QtModules]]find_package(Qt5[[$module]] REQUIRED)
[[end]]# include extra settings

include("CMakeExtra.txt" OPTIONAL)
[[if .Tests.HasItem]]
# enable tests

enable_testing()
find_package(Qt5Test REQUIRED)
[[.ExtraTestSources.DefineList]]
[[.Tests.DefineList]]
[[.Tests.StartLoop]]
  get_filename_component(execname ${file} NAME_WE)
  add_executable(${execname} ${file} ${[[.Sources.Name]]} ${[[.ExtraTestSources.Name]]}[[if .Resources.HasItem]] ${QRC}[[end]])
  add_test(NAME ${execname} COMMAND ${execname})
  qt5_use_modules(${file} Test[[range $module := .QtModules]] [[$module]][[end]])
[[.Tests.EndLoop]]
[[end]]# build setting

include_directories(src)
[[.Sources.DefineList]][[if gt (len .Requires) 0]]
link_libraries([[range .RequireLibs]] [[.]][[end]])[[end]]
if(APPLE)
  set(MACOSX_BUNDLE_BUNDLE_NAME [[.Target]])
  set(MACOSX_BUNDLE_GUI_IDENTIFIER "[[.Target]]")
  set(MACOSX_BUNDLE_ICON_FILE MacOSXAppIcon.icns)
  set_source_files_properties(${WORKDIR}/MacOSXAppIcon.icns PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")
  set(MACOSX_BUNDLE_INFO_STRING "[[.Target]]-[[.Version]], Copyright [[.CopyRight]]")
  set(MACOSX_BUNDLE_SHORT_VERSION_STRING "${[[.TargetLarge]]_MAJOR_VERSION}.${[[.TargetLarge]]_MINOR_VERSION}" )
  set(MACOSX_BUNDLE_LONG_VERSION_STRING "${[[.TargetLarge]]_VERSION}")
  set(MACOSX_BUNDLE_BUNDLE_VERSION "${[[.TargetLarge]]_VERSION}")
  set(MACOSX_BUNDLE_COPYRIGHT "(C) [[.CopyRight]]")
  add_executable([[.TargetSmall]] MACOSX_BUNDLE src/main.cpp[[if .Sources.HasItem]] ${[[.Sources.Name]]}[[end]][[if .HasResource]] resources/resource.qrc[[end]] ${WORKDIR}/MacOSXAppIcon.icns)
elseif(WIN32)
  set(RES_FILES "${WORKDIR}/windows.rc")
  set(CMAKE_RC_COMPILER_INIT windres)
  ENABLE_LANGUAGE(RC)
  SET(CMAKE_RC_COMPILE_OBJECT "<CMAKE_RC_COMPILER> <FLAGS> -O coff <DEFINES> -i <SOURCE> -o <OBJECT>")
  add_executable([[.TargetSmall]] WIN32 src/main.cpp[[if .Sources.HasItem]] ${[[.Sources.Name]]}[[end]][[if .HasResource]] resources/resource.qrc[[end]] ${RES_FILES})
else()
  add_executable([[.TargetSmall]] src/main.cpp[[if .Sources.HasItem]] ${[[.Sources.Name]]}[[end]][[if .HasResource]] resources/resource.qrc[[end]])
endif()
[[if gt (len .QtModules) 0]]qt5_use_modules([[.TargetSmall]][[range $module := .QtModules]] [[$module]][[end]])[[end]]